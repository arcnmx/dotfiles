#!/bin/sh
set -eu
set -o pipefail

usage() {
	echo "Usage: $0 [OPTIONS...] [CONFIG...]"
	echo " [-h]: show this help"
	echo
	echo " CONFIG: snapper config to backup"
	echo
	echo "Backs up snapper directories as incremental tarballs"
}

main() {
	SNAPPER_DIR=/etc/snapper/configs

	while getopts ":h" opt; do
		case $opt in
			h) # --help
				usage
				return 0
				;;
			:)
				echo "Expected argument for option: -$OPTARG" >&2
				usage >&2
				return 1
				;;
			\?)
				echo "Invalid option: -$OPTARG" >&2
				usage >&2
				return 1
				;;
		esac
	done
	shift $((OPTIND-1))

	if [ $# -lt 1 ]; then
		CONFIGS="$(. /etc/conf.d/snapper && echo $SNAPPER_CONFIGS ${SNAR_CONFIGS-})"
	else
		CONFIGS="$*"
	fi

	for CONFIG in $CONFIGS; do
		(
			. /etc/conf.d/snapper
			. "$SNAPPER_DIR/$CONFIG"

			SNAR="$SUBVOLUME/.snapshots/snar"

			if [ "${SNAR_ENABLE-}" = "yes" ]; then
				if ! [ -d "$SNAR" ]; then
					mkdir "$SNAR"

					if [ $(id -u) -eq 0 ]; then
						chown :snar "$SNAR"
						chmod u+rwx,g+rs,g-w,o-rwx "$SNAR"
					fi
				fi

				SNAR_FLAGS=-BE
				if [ "${TIMELINE_CREATE-}" = "yes" ]; then
					SNAR_FLAGS="$SNAR_FLAGS -S"
				fi
				if [ -n "${SNAR_DIRNAME-}" ]; then
					SNAR_FLAGS="$SNAR_FLAGS -D $SNAR_DIRNAME"
				fi

				BENC_FLAGS=
				if [ -n "${SNAR_KEY-}" ]; then
					BENC_FLAGS="-K $SNAR_KEY"
				fi

				echo "backing up $CONFIG" >&2

				snar $SNAR_FLAGS "$SUBVOLUME"

				TMP="$(mktemp -d)"
				trap 'rm -rf "$TMP"' EXIT

				SNAR_LATEST=$(cat "$SNAR/latest")
				cp -a "$SNAR/latest" "$SNAR/$SNAR_LATEST.snar" "$TMP/"

				if ! [ -d "$SNAR/.enc" ]; then
					mkdir "$SNAR/.enc"
				fi

				benc $BENC_FLAGS -d -c xz -C -9 "$SNAR" "$SNAR/.enc"
				mv "$TMP/"* "$SNAR/"

				if [ -n "${SNAR_SYNC-}" ]; then
					_bsync() {
						if [ $(id -u) -eq 0 ]; then
							cat "$(which bsync)" | sudo -u snar sh -s -- "$@"
						else
							bsync "$@"
						fi
					}

					_bsync -d "$SNAR/.enc" $SNAR_SYNC
				fi
			fi
		)
	done
}

main "$@"
